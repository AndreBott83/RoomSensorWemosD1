import java.util.HashMap

var HashMap<String, String> sensorUpdateMap = new HashMap<String, String>()
var int MINUTES_TO_CHECK_FOR_ACTIVITY = 50
var int HoursTillBatteryIsConsideredDead = 4
var String MAIL_HAS_BEEN_SENT = "mailHasBeenSent"
var String RECIPIENT = "A.Bott@gmx.net"

rule "dailySummarize"
when 
    Time cron "0 0 23 * * ?"
then
    val String sensorInfo = now.toString + "\n\n"
    gSensor.allMembers.forEach[item | 
        val Number maxValue = item.maximumSince(now.minusMinutes(1440)).state
        val Number minValue = item.minimumSince(now.minusMinutes(1440)).state
                
        sensorInfo = sensorInfo + item.name.toString
        sensorInfo = sensorInfo + "\nLastUpdate: " + item.lastUpdate.toString             
        sensorInfo = sensorInfo + "\nMaxValue: " + String.format("%.2f",(maxValue).floatValue())
        sensorInfo = sensorInfo + "\nMinValue: " + String.format("%.2f",(minValue).floatValue())
        sensorInfo = sensorInfo + "\n\n"              
    ]
    sendMail(RECIPIENT, "Sensor Information!", sensorInfo.toString)
    
end

rule "checkBatteryAndLog"
when
	Time cron "* * 4 * * ?"
then
	var boolean BatteryBad = false
	gBad.allMembers.forEach[ item |
		if (item.updatedSince(now.minusHours(HoursTillBatteryIsConsideredDead))) {
			BatteryBad = true
		}
	]
	if (BatteryBad) {
		postUpdate(BatteryStatusBad, 1)
	} else {
		if (Integer.valueOf(BatteryStatusBad.previousState.state.toString).equals(1)) {
			sendMail(RECIPIENT, "Sensor in Bathroom failed to update!", "All sensors in bathroom did not update.\n\nReplace Battery soon!")			
		}
		postUpdate(BatteryStatusBad, 0)		
	}
	BatteryStatusBad.persist()
	
	var boolean BatterySleepingRoom = false
	gSleepingRoom.allMembers.forEach[item |
		if (item.updatedSince(now.minusHours(HoursTillBatteryIsConsideredDead))) {
			BatterySleepingRoom = true
		}
	]
	if (BatterySleepingRoom) {
		postUpdate(BatteryStatusSleepingRoom, 1)
	} else {
		if (Integer.valueOf(BatteryStatusSleepingRoom.previousState.state.toString).equals(1)) {
			sendMail(RECIPIENT, "Sensor in SleepingRoom failed to update!", "All sensors in SleepingRoom did not update.\n\nReplace Battery soon!")			
		}
		postUpdate(BatteryStatusSleepingRoom, 0)		
	}
	BatteryStatusSleepingRoom.persist()
	

	var boolean BatteryLivingRoom = false
	gLivingRoom.allMembers.forEach[item |
		if (item.updatedSince(now.minusHours(HoursTillBatteryIsConsideredDead))) {
			BatteryLivingRoom = true
		}
	]
	if (BatteryLivingRoom) {
		postUpdate(BatteryStatusLivingRoom, 1)
	} else {
		if (Integer.valueOf(BatteryStatusLivingRoom.previousState.state.toString).equals(1)) {
			sendMail(RECIPIENT, "Sensor in LivingRoom failed to update!", "All sensors in LivingRoom did not update.\n\nReplace Battery soon!")			
		}
		postUpdate(BatteryStatusLivingRoom, 0)		
	}
	BatteryStatusLivingRoom.persist()
	

	var boolean BatteryBasement = false
	gBasement.allMembers.forEach[item |
		if (item.updatedSince(now.minusHours(HoursTillBatteryIsConsideredDead))) {
			BatteryBasement = true
		}
	]
	if (BatteryBasement) {
		postUpdate(BatteryStatusBasement, 1)
	} else {
		if (Integer.valueOf(BatteryStatusBasement.previousState.state.toString).equals(1)) {
			sendMail(RECIPIENT, "Sensor in Basement failed to update!", "All sensors in Basement did not update.\n\nReplace Battery soon!")			
		}
		postUpdate(BatteryStatusBasement, 0)		
	}
	BatteryStatusBasement.persist()
	
	var boolean BatteryStudio = false
	gStudio.allMembers.forEach[item |
		if (item.updatedSince(now.minusHours(HoursTillBatteryIsConsideredDead))) {
			BatteryStudio = true
		}
	]
	if (BatteryStudio) {
		postUpdate(BatteryStatusStudio, 1)
	} else {
		if (Integer.valueOf(BatteryStatusStudio.previousState.state.toString).equals(1)) {
			sendMail(RECIPIENT, "Sensor in Studio failed to update!", "All sensors in Studio did not update.\n\nReplace Battery soon!")			
		}
		postUpdate(BatteryStatusStudio, 0)		
	}
	BatteryStatusStudio.persist()
		
	

end
