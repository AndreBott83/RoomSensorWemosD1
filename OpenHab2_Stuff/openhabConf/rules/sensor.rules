import java.util.HashMap
import org.eclipse.xtext.xbase.lib.Functions

var HashMap<String, String> sensorUpdateMap = new HashMap<String, String>()
var int MINUTES_TO_CHECK_FOR_ACTIVITY = 50
var int HoursTillBatteryIsConsideredDead = 4
var String MAIL_HAS_BEEN_SENT = "mailHasBeenSent"
var String RECIPIENT = "A.Bott@gmx.net"

val Functions$Function2<String, Long, String> getBatteryStatus = [
	name,
	timestampMillis |
	
	var String batteryStatus = ""
	var item = gSensorStatus.members.filter[item|item.name == name].head
	var Number currentState = item.state as Number
	
	var pastTime = now.withTimeAtStartOfDay
	var pastState = item.historicState(pastTime)
	while (pastState !== null) {		
		pastTime = pastTime.minusDays(1)
		pastState = item.historicState(pastTime)
	}
	
	
	if (currentState == 0) {
		if (item.previousState(true) === null) {
			var Float timeInDaysDead = (timestampMillis - pastTime.millis).floatValue()/1000/60/60/24
			batteryStatus = "Off since " +  String.format("%.2f",timeInDaysDead) + " days" 
		} else {
			var timeOffline = item.previousState(true).timestamp			
			var Integer daysLastBattery = 0
			var timeToCheck = now.withMillis(timeOffline.time)
			while (item.historicState(timeToCheck) !== null) {
				daysLastBattery = daysLastBattery + 1
				timeToCheck = timeToCheck.minusDays(daysLastBattery)
			}
			batteryStatus = "Last BatteryLife: " + String.valueOf(daysLastBattery) + " days"
		}
	} else {
		if (item.previousState(true) === null) {
			var Float timeInDaysAlive = (timestampMillis - pastTime.millis).floatValue()/1000/60/60/24			
			batteryStatus = "Online since " +  String.format("%.2f",timeInDaysAlive) + " days"
		} else {
			var Float timeInDaysAlive = (timestampMillis - item.previousState(true).timestamp.time).floatValue()/1000/60/60/24
			batteryStatus = "Online since " +  String.format("%.2f",timeInDaysAlive) + " days"
		}
		
	}	
		
	return batteryStatus
	//String.valueOf(BatteryStatusBad.previousState(true) === null))
	//var String batteryStateActiveSince = String.valueOf((now.millis - BatteryStatusStudio.previousState(true).timestamp.time).floatValue()/1000/60/60/24) + " Tage"
		
]

val Functions$Function5<String, String, String, String, String, String> makeTableRow = [
    name,
    minValue,
    maxValue,
    currentValue,
    TSLastValue |  
    
    //create name field with 50 characters
    var nameTable = name
    if (nameTable.length <= 30) {
    	var i = nameTable.length()
    	while ((i=i+1) <= 30) {    		
    		nameTable = nameTable + " "    		
		}	
    } else {
    	nameTable = nameTable.substring(0,29) + " "    	
    }
    
    
    //create min and max fields with 10 chars
    var minValueTable = minValue
    var i = minValueTable.length()
    while ((i=i+1) < 15) {
    	minValueTable = " " + minValueTable
    }

    var maxValueTable = maxValue
    var j = maxValueTable.length()
    while ((j=j+1) < 15) {
    	maxValueTable = " " + maxValueTable
    }
    
    var currentValueTable = currentValue
    var k = currentValueTable.length()
    while ((k=k+1) < 15) {
    	currentValueTable = " " + currentValueTable
    }
    
    var TSLastValueTable = TSLastValue
    var l = TSLastValueTable.length()
    while ((l=l+1) < 30) {
    	TSLastValueTable = TSLastValueTable + " "
    }
	
	var String tableRow = ""
	tableRow = tableRow + "| " + nameTable + " | " + minValueTable + " | " + maxValueTable + " | " + currentValueTable + " | " + TSLastValueTable + " |\n"
	return tableRow
]


rule "dailySummarize"
when
	//Time cron "0/10 * * * * ?" 
    Time cron "0 0 23 * * ?"
then
    val String timeAtRun = now.toString + "\n\n"   
    val Long timeAtRunMillis = now.millis
       
    val temperatureTable = makeTableRow.apply("name","minValue","maxValue","currentValue","LastUpdated")  
    gTemperatures.allMembers.forEach[item |
    	var Number maxValue = item.maximumSince(now.minusMinutes(1440)).state as Number
    	var String maxTS = item.maximumSince(now.minusMinutes(1440)).timestamp.toString.substring(11,16)
    	var Number minValue = item.minimumSince(now.minusMinutes(1440)).state as Number
    	var String minTS = item.minimumSince(now.minusMinutes(1440)).timestamp.toString.substring(11,16)
    	var Number currentValue = item.state as Number
    	
    	var String maxValueString = String.format("%.2f",(maxValue).floatValue()) + " (" + maxTS + ")"   	
        var String minValueString = String.format("%.2f",(minValue).floatValue()) + " (" + minTS + ")"
        var String currentValueString = String.format("%.2f",(currentValue).floatValue())
        
        
        var String lastUpdate = item.lastUpdate.toString       
        temperatureTable = temperatureTable + makeTableRow.apply(item.name.toString,minValueString,maxValueString,currentValueString,lastUpdate)       
    	
    ]
    
  val humiditiesTable = makeTableRow.apply("name","minValue","maxValue","currentValue","LastUpdated")  
    gHumidities.allMembers.forEach[item |
    	var Number maxValue = item.maximumSince(now.minusMinutes(1440)).state as Number
    	var String maxTS = item.maximumSince(now.minusMinutes(1440)).timestamp.toString.substring(11,16)
    	var Number minValue = item.minimumSince(now.minusMinutes(1440)).state as Number
    	var String minTS = item.minimumSince(now.minusMinutes(1440)).timestamp.toString.substring(11,16)
    	var Number currentValue = item.state as Number
    	
    	var String maxValueString = String.format("%.2f",(maxValue).floatValue()) + " (" + maxTS + ")"   	
        var String minValueString = String.format("%.2f",(minValue).floatValue()) + " (" + minTS + ")"
        var String currentValueString = String.format("%.2f",(currentValue).floatValue())
        
        
        var String lastUpdate = item.lastUpdate.toString
        humiditiesTable = humiditiesTable + makeTableRow.apply(item.name.toString,minValueString,maxValueString,currentValueString,lastUpdate)       
    	
	]  
	
	var String batteryInformationTable = ""
	//logInfo("test",BatteryStatusBad.previousState(true).timestamp.toString)
	//logInfo("test",String.valueOf(BatteryStatusBad.previousState(true) === null))
	//var String batteryStateActiveSince = String.valueOf((now.millis - BatteryStatusStudio.previousState(true).timestamp.time).floatValue()/1000/60/60/24) + " Tage"
	
	batteryInformationTable = batteryInformationTable + "Battery Basement: " + BatteryStatusBasement.state.toString + " (" + getBatteryStatus.apply("BatteryStatusBasement",timeAtRunMillis) + ")\n"
    batteryInformationTable = batteryInformationTable + "Battery Waschkeller: " + BatteryStatusWaschkeller.state.toString + " (" + getBatteryStatus.apply("BatteryStatusWaschkeller",timeAtRunMillis) + ")\n"
	batteryInformationTable = batteryInformationTable + "Battery LivingRoom: " + BatteryStatusLivingRoom.state.toString + " (" + getBatteryStatus.apply("BatteryStatusLivingRoom",timeAtRunMillis) + ")\n"
	batteryInformationTable = batteryInformationTable + "Battery SleepingRoom: " + BatteryStatusSleepingRoom.state.toString + " (" + getBatteryStatus.apply("BatteryStatusSleepingRoom",timeAtRunMillis) + ")\n"
	batteryInformationTable = batteryInformationTable + "Battery Bad: " + BatteryStatusBad.state.toString + " (" + getBatteryStatus.apply("BatteryStatusBad",timeAtRunMillis) + ")\n"
    batteryInformationTable = batteryInformationTable + "Battery ZimmerSebastian: " + BatteryStatusZimmerSebastian.state.toString + " (" + getBatteryStatus.apply("BatteryStatusZimmerSebastian",timeAtRunMillis) + ")\n"
	batteryInformationTable = batteryInformationTable + "Battery Studio: " + BatteryStatusStudio.state.toString + " (" + getBatteryStatus.apply("BatteryStatusStudio",timeAtRunMillis) + ")\n"
	//batteryInformationTable = batteryInformationTable + "State active since : " + batteryStateActiveSince + "\n"
	
	
	var mailBody = ""
	mailBody = "Sensor Information: " + timeAtRun
	mailBody = mailBody + batteryInformationTable + "\n\n"
	mailBody = mailBody + "Temperaturen:\n" + temperatureTable +"\n"
	mailBody = mailBody + "relative Feuchte:\n" + humiditiesTable
		
    sendMail(RECIPIENT, "Sensor Information!", mailBody.toString)    
    
end

rule "checkBatteryAndLog"
when		
	//Time cron "*/5 * * * * ?"
	Time cron "0 0 0/2 * * ?"
then
	var boolean BatteryBad = false
	gBad.allMembers.forEach[ item |
		if (item.updatedSince(now.minusHours(HoursTillBatteryIsConsideredDead))) {
			BatteryBad = true
		}
	]
	if (BatteryBad) {
		postUpdate(BatteryStatusBad, 1)		
	} else {
		if (Double.parseDouble(BatteryStatusBad.previousState.state.toString).equals(1.0)) {
			sendMail(RECIPIENT, "Sensor in Bathroom failed to update!", "All sensors in bathroom did not update.\n\nReplace Battery soon!")			
		}
		postUpdate(BatteryStatusBad, 0)		
	}
	BatteryStatusBad.persist()
	
	var boolean BatterySleepingRoom = false
	gSleepingRoom.allMembers.forEach[item |
		if (item.updatedSince(now.minusHours(HoursTillBatteryIsConsideredDead))) {
			BatterySleepingRoom = true
		}
	]
	if (BatterySleepingRoom) {
		postUpdate(BatteryStatusSleepingRoom, 1)
	} else {
		if (Double.parseDouble(BatteryStatusSleepingRoom.previousState.state.toString).equals(1.0)) {
			sendMail(RECIPIENT, "Sensor in SleepingRoom failed to update!", "All sensors in SleepingRoom did not update.\n\nReplace Battery soon!")			
		}
		postUpdate(BatteryStatusSleepingRoom, 0)		
	}
	BatteryStatusSleepingRoom.persist()
	

	var boolean BatteryLivingRoom = false
	gLivingRoom.allMembers.forEach[item |
		if (item.updatedSince(now.minusHours(HoursTillBatteryIsConsideredDead))) {
			BatteryLivingRoom = true
		}
	]
	if (BatteryLivingRoom) {
		postUpdate(BatteryStatusLivingRoom, 1)
	} else {
		if (Double.parseDouble(BatteryStatusLivingRoom.previousState.state.toString).equals(1.0)) {
			sendMail(RECIPIENT, "Sensor in LivingRoom failed to update!", "All sensors in LivingRoom did not update.\n\nReplace Battery soon!")			
		}
		postUpdate(BatteryStatusLivingRoom, 0)		
	}
	BatteryStatusLivingRoom.persist()
	

	var boolean BatteryBasement = false
	gBasement.allMembers.forEach[item |
		if (item.updatedSince(now.minusHours(HoursTillBatteryIsConsideredDead))) {
			BatteryBasement = true
		}
	]
	if (BatteryBasement) {
		postUpdate(BatteryStatusBasement, 1)
	} else {
		if (Double.parseDouble(BatteryStatusBasement.previousState.state.toString).equals(1.0)) {
			sendMail(RECIPIENT, "Sensor in Basement failed to update!", "All sensors in Basement did not update.\n\nReplace Battery soon!")			
		}
		postUpdate(BatteryStatusBasement, 0)		
	}
	BatteryStatusBasement.persist()
	
    /* Studio */
	var boolean BatteryStudio = false
	gStudio.allMembers.forEach[item |
		if (item.updatedSince(now.minusHours(HoursTillBatteryIsConsideredDead))) {
			BatteryStudio = true
		}
	]
	if (BatteryStudio) {
		postUpdate(BatteryStatusStudio, 1)
	} else {
		if (Double.parseDouble(BatteryStatusStudio.previousState.state.toString).equals(1.0)) {
			sendMail(RECIPIENT, "Sensor in Studio failed to update!", "All sensors in Studio did not update.\n\nReplace Battery soon!")			
		}
		postUpdate(BatteryStatusStudio, 0)		
	}
	BatteryStatusStudio.persist()
    
    /* Waschkeller */    
    var boolean BatteryWaschkeller = false
	gWaschkeller.allMembers.forEach[item |
		if (item.updatedSince(now.minusHours(HoursTillBatteryIsConsideredDead))) {
			BatteryWaschkeller = true
		}
	]
	if (BatteryWaschkeller) {
		postUpdate(BatteryStatusWaschkeller, 1)
	} else {
		if (Double.parseDouble(BatteryStatusWaschkeller.previousState.state.toString).equals(1.0)) {
			sendMail(RECIPIENT, "Sensor in Waschkeller failed to update!", "All sensors in Waschkeller did not update.\n\nReplace Battery soon!")			
		}
		postUpdate(BatteryStatusWaschkeller, 0)		
	}
	BatteryStatusWaschkeller.persist()
    
     /* ZimmerSebastian */    
    var boolean BatteryZimmerSebastian = false
	gWaschkeller.allMembers.forEach[item |
		if (item.updatedSince(now.minusHours(HoursTillBatteryIsConsideredDead))) {
			BatteryZimmerSebastian = true
		}
	]
	if (BatteryZimmerSebastian) {
		postUpdate(BatteryStatusZimmerSebastian, 1)
	} else {
		if (Double.parseDouble(BatteryStatusZimmerSebastian.previousState.state.toString).equals(1.0)) {
			sendMail(RECIPIENT, "Sensor in ZimmerSebastian failed to update!", "All sensors in ZimmerSebastian did not update.\n\nReplace Battery soon!")			
		}
		postUpdate(BatteryStatusZimmerSebastian, 0)		
	}
	BatteryStatusZimmerSebastian.persist()
		
	

end