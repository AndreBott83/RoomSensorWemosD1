import java.util.HashMap

var HashMap<String, String> sensorUpdateMap = new HashMap<String, String>()
var int MINUTES_TO_CHECK_FOR_ACTIVITY = 50
var String MAIL_HAS_BEEN_SENT = "mailHasBeenSent"
var String RECIPIENT = "A.Bott@gmx.net"

rule "dailySummarize"
when 
    Time cron "0/50 * 0/1 * * ?"
then
    gSensor.allMembers.forEach[item | 
        val maxString = item.toString + " maxValue= " + item.maximumSince(now.minusMinutes(1440))
        logInfo( "cron", maxString.toString )              
    ]
    
end
 
 
rule "Send Mail if sensor has not been updated for 10 min"
when
    Item gSensor received update
then	
	gSensor.allMembers.forEach[item |				
		if (!item.changedSince(now.minusMinutes(MINUTES_TO_CHECK_FOR_ACTIVITY))) {				
			if(!sensorUpdateMap.containsKey(item.name) || !sensorUpdateMap.get(item.name).equals(MAIL_HAS_BEEN_SENT)){
				sensorUpdateMap.put(item.name, MAIL_HAS_BEEN_SENT)
				val String failedUpdateString = "sensor " + item.toString + " did not update its value in the last " + String.valueOf(MINUTES_TO_CHECK_FOR_ACTIVITY) +  "minutes\nLast Update with values: " + item.previousState(true).timestamp.toString()		
				sendMail(RECIPIENT, "Sensor failed to update!", failedUpdateString.toString)
			}
		} else {
			if(sensorUpdateMap.containsKey(item.name) && sensorUpdateMap.get(item.name).equals(MAIL_HAS_BEEN_SENT)){
				sensorUpdateMap.remove(item.name)
				val returnedSensorString = "sensor " + item.toString + " is online again!\nLast Update with values: " + item.previousState(true).timestamp.toString()
				sendMail(RECIPIENT, "Sensor returned!", returnedSensorString.toString)					
			}
		}
	]
end